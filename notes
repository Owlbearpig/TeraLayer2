1. CreaDatos # simulate reflectance r_sim, given d0, lthz. Add noise. -> optimize abs(r(d, lthz)-r_sim)

CreaDatos.m
	% *** Construct THz wavelenghts ***
	lopt = [800 800.1 800.3 800.7]*1e-9 # Optical Wavelenghts
	d0 = [0.001 0.0003] # simulated thicknesses
	lthz = diff(lopt) # frequency(wl) diffs (6 in total)
	r = reflectance(d0, lthz) # reflectance (multir.m)

	r_noise = randn(1,6)/(10*w) # scaled(w=1,...,10) noise
	r_sim = r + r_noise

	di=[0.00085 0.00032] # x0, initial "guess"
    lb, hb=[0.0001 0.0001], [0.003 0.003] # optimization bounds

    options=optimoptions(@lsqcurvefit,'Algorithm','levenberg-marquardt',
                        'MaxFunctionEvaluations',2000000, 'MaxIterations', 200000, 'StepTolerance',1e-15)
    [d,resnorm] = lsqcurvefit(@multir,di,lthz,rr,lb,hb,options);

    d # result

multir.m
    ...

parametros.m (like consts.py)
    n=[1 1.50 2.8 1.50 1];
    a=1;
    thea=8*pi/180;


2. Kopf_0-100, BG_1000, ref_1000x. (f (MHz), ampl. s., phase. s., ampl. r., phase. r.,). Real measurements ?

r=dlmread('ref_1000x.csv', ',', 1, 0)
b=dlmread('BG_1000.csv', ',', 1, 0)

s=dlmread('Kopf_1x_0001', ',', 1, 0) ...

f=r(235:end-1,1)*MHz
lam=c0/f

rr=r(235:end-1,2)-b(235:end-1,2)
ss=s(235:end-1,2)-b(235:end-1,2)

T=ss./rr

R=T.^2 # measured reflectivity


- Implementing least squares algorithm(levenberg-marquardt)...
    (should be in scipy.optimize)
